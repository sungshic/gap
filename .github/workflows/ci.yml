name: CI

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - uses: pre-commit/action@v3.0.1

  # Make sure commit messages follow the conventional commits convention:
  # https://www.conventionalcommits.org
  commitlint:
    name: Lint Commit Messages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@v6.0.1

  test:
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.12"
        os:
          - ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        id: cache
        with:
          path: |
            "${GITHUB_WORKSPACE}"/tests/data/sample1/SP2_S6_L001_R1_001.fastq.gz
            "${GITHUB_WORKSPACE}"/tests/data/sample1/SP2_S6_L001_R2_001.fastq.gz
            "${GITHUB_WORKSPACE}"/tests/data/test_data_bundle.tar.gz
          key: ${{ runner.os }}-v0.1-${{ hashFiles('**/lockfiles') }}
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y -q git git-lfs unzip virtualenv openjdk-21-jre npm seqtk samtools picard-tools bowtie2 bcftools fastqc trimmomatic
      - name: Install poetry
        run: pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: ${{ matrix.python-version }}
          cache: poetry
      - name: Install Dependencies
        run: poetry install
        shell: bash
      - name: Create directory structure for test data
        run: |
          mkdir -p "${GITHUB_WORKSPACE}"/tests/data/sample1
      - name: Download pytest FASTQ sample data part1
        if: steps.cache.outputs.cache-hit != 'true'
        run: curl -sSL 'https://osf.io/xr48c/download' -o "${GITHUB_WORKSPACE}"/tests/data/sample1/SP2_S6_L001_R1_001.fastq.gz
      - name: Download pytest FASTQ sample data part2
        if: steps.cache.outputs.cache-hit != 'true'
        run: curl -sSL 'https://osf.io/9gya4//download' -o "${GITHUB_WORKSPACE}"/tests/data/sample1/SP2_S6_L001_R2_001.fastq.gz
      - name: Download pytest test ref data
        if: steps.cache.outputs.cache-hit != 'true'
        run: curl -sSL 'https://osf.io/auqje/download' -o "${GITHUB_WORKSPACE}"/tests/data/test_ref_data.tar.gz
      - name: Unzip the test ref data
        run: tar -kxzf "${GITHUB_WORKSPACE}"/tests/data/test_ref_data.tar.gz -C "${GITHUB_WORKSPACE}"/tests/data/
      - name: Download GATK and unzip it under the toolset directory
        run: |
          curl -sSL https://github.com/broadinstitute/gatk/releases/download/4.6.0.0/gatk-4.6.0.0.zip -o "${GITHUB_WORKSPACE}"/gatk-4.6.0.0.zip
          unzip -d "${GITHUB_WORKSPACE}"/src/gsap/toolset/ "${GITHUB_WORKSPACE}"/gatk-4.6.0.0.zip
      - name: Download spades assembler and unzip it under the toolset directory
        run: |
          curl -sSL https://github.com/ablab/spades/releases/download/v4.0.0/SPAdes-4.0.0-Linux.tar.gz -o "${GITHUB_WORKSPACE}"/SPAdes-4.0.0-Linux.tar.gz
          tar -xzf "${GITHUB_WORKSPACE}"/SPAdes-4.0.0-Linux.tar.gz -C "${GITHUB_WORKSPACE}"/src/gsap/toolset/
      - name: Test with Pytest
        run: poetry run pytest
        shell: bash
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  release:
    needs:
      - test
      - lint
      - commitlint

    runs-on: ubuntu-latest
    environment: release
    concurrency: release
    permissions:
      id-token: write
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref || github.ref_name }}

      # Do a dry run of PSR
      - name: Test release
        uses: python-semantic-release/python-semantic-release@v9.8.1
        if: github.ref_name != 'main'
        with:
          root_options: --noop

      # On main branch: actual PSR + upload to PyPI & GitHub
      - name: Release
        uses: python-semantic-release/python-semantic-release@v9.8.1
        id: release
        if: github.ref_name == 'main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        if: steps.release.outputs.released == 'true'

      - name: Publish package distributions to GitHub Releases
        uses: python-semantic-release/upload-to-gh-release@main
        if: steps.release.outputs.released == 'true'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
