[tool.poetry]
name = "gsap"
version = "0.0.0"
description = "NGS devices generate short sequence reads collated together into raw unassembled sequence data formats, such as FASTQ. There are a series of steps involved in converting the raw data into some form ready to be consumed by other high-level bioinformatic analyses. This Python package is a software pipeline implementation that automates the assembly and the annotation of NGS sequence data from short sequence reads. The pipeline also performs variant analysis to annotate the assembled sequence about any SNPs and INDELs with respect to a reference genome of choice."
authors = ["Sunny Park <sungshic@hotmail.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/sungshic/gsap"
documentation = "https://gsap.readthedocs.io"
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries",
]
packages = [
    { include = "gsap", from = "src" },
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/sungshic/gsap/issues"
"Changelog" = "https://github.com/sungshic/gsap/blob/main/CHANGELOG.md"

[tool.poetry.dependencies]
python = "^3.11"
deap = "1.4.1"
numpy = "1.26.4"
scipy = "1.14.0"
fcsparser = "0.2.8"
flowcytometrytools = "0.5.1"
matplotlib = "3.9.1"
biopython = "1.84"
pyvcf3 = "1.0.3"
sh = "^2.0.7"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-cov = "^5.0.0"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
myst-parser = { version = ">=0.16", python = ">=3.11"}
sphinx = { version = ">=4.0", python = ">=3.11"}
furo = { version = ">=2023.5.20", python = ">=3.11"}
sphinx-autobuild = { version = ">=2024.0.0", python = ">=3.11"}

[tool.semantic_release]
version_toml = ["pyproject.toml:tool.poetry.version"]
version_variables = [
    "src/gsap/__init__.py:__version__",
    "docs/conf.py:release",
]
build_command = "pip install poetry && poetry build"

[tool.semantic_release.changelog]
exclude_commit_patterns = [
    "chore*",
    "ci*",
]

[tool.semantic_release.changelog.environment]
keep_trailing_newline = true

[tool.semantic_release.branches.main]
match = "main"

[tool.semantic_release.branches.noop]
match = "(?!main$)"
prerelease = true

[tool.pytest.ini_options]
addopts = """\
    -v
    -Wdefault
    --cov=gsap
    --cov-report=term
    --cov-report=xml
    """
pythonpath = ["src"]

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "@overload",
    "if TYPE_CHECKING",
    "raise NotImplementedError",
    'if __name__ == "__main__":',
]

[tool.ruff]
target-version = "py38"
line-length = 88

[tool.ruff.lint]
ignore = [
    "D203", # 1 blank line required before class docstring
    "D212", # Multi-line docstring summary should start at the first line
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D107", # Missing docstring in `__init__`
    "D401", # First line of docstring should be in imperative mood
]
select = [
    "B",   # flake8-bugbear
    "D",   # flake8-docstrings
    "C4",  # flake8-comprehensions
    "S",   # flake8-bandit
    "F",   # pyflake
    "E",   # pycodestyle
    "W",   # pycodestyle
    "UP",  # pyupgrade
    "I",   # isort
    "RUF", # ruff specific
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "S101",
]
"setup.py" = ["D100"]
"conftest.py" = ["D100"]
"docs/conf.py" = ["D100"]

[tool.ruff.lint.isort]
known-first-party = ["gsap", "tests"]

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
mypy_path = "src/"
no_implicit_optional = true
show_error_codes = true
warn_unreachable = true
warn_unused_ignores = true
exclude = [
    'docs/.*',
    'setup.py',
]

[[tool.mypy.overrides]]
module = "tests.*"
allow_untyped_defs = true

[[tool.mypy.overrides]]
module = "docs.*"
ignore_errors = true

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
